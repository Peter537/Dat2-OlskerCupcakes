@startuml

top to bottom direction
skinparam linetype ortho

class ApplicationStart {
  - connectionPool: ConnectionPool
  + contextInitialized(ServletContextEvent): void
  + contextDestroyed(ServletContextEvent): void
  - unregisterJDBCdrivers(): void
  - getPassword(ServletContextEvent): String
}

class ConnectionPool {
  + ConnectionPool(String, String, String):
  + ConnectionPool(String):
  - ds: HikariDataSource
  - USER: String
  - URL: String
  + getConnection(): Connection
  + close(): void
}

class CupcakeFacade {
  + getBottomById(int, Connection): Bottom
  + getAllToppings(Connection): List<Top>
  + getTopById(int, Connection): Top
  + getAllBottoms(Connection): List<Bottom>
}

class CupcakeMapper {
  ~ getAllToppings(Connection): List<Top>
  ~ getBottomById(int, Connection): Bottom
  ~ getAllBottoms(Connection): List<Bottom>
  ~ getTopById(int, Connection): Top
}

class DatabaseException {
  + DatabaseException(Exception, String):
  + DatabaseException(String):
}

class OrderFacade {
  + getAllOrdersByUser(User, Connection, boolean): List<Order>
  + createOrder(Order, Connection): void
  + getAllOrdersSortedByStatus(Connection): List<Order>
  + createOrder(Order, Connection, boolean): void
  + getAllOrders(Connection): List<Order>
  + getAllOrders(Connection, boolean): List<Order>
  + updateOrderStatus(int, OrderStatus, Connection): void
  + updateOrderStatus(int, OrderStatus, Connection, boolean): void
  + getAllOrdersByUser(User, Connection): List<Order>
}

class OrderMapper {
  ~ updateOrderStatus(int, OrderStatus, Connection, boolean): void
  ~ getAllOrders(Connection, boolean): List<Order>
  ~ createOrder(Order, Connection, boolean): void
  ~ getAllOrdersByUser(User, Connection, boolean): List<Order>
  - getShoppingCartByOrderId(int, Connection): ShoppingCart
}

class UserFacade {
  + getAllUsers(Connection): List<User>
  + setNewPassword(User, Connection): void
  + login(String, String, Connection): User
  + getUserByEmail(String, Connection): User
  + updateBalance(User, Connection): void
  + createUser(String, String, Role, Connection): User
}

class UserMapper {
  ~ setNewPassword(User, Connection): void
  ~ updateBalance(User, Connection, boolean): void
  ~ getAllUsers(Connection): List<User>
  ~ login(String, String, Connection): User
  ~ createUser(String, String, Role, Connection): User
  ~ getUserByEmail(String, Connection): User
}

ApplicationStart  "1" *-[#595959,plain]-> "connectionPool\n1" ConnectionPool

UserFacade        "1" -[#595959,plain]-> "userMapper\n1" UserMapper
CupcakeFacade     "1" -[#595959,plain]-> "cupcakeMapper\n1" CupcakeMapper
OrderFacade       "1" -[#595959,plain]-> "orderMapper\n1" OrderMapper

@enduml