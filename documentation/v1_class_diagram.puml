@startuml

top to bottom direction
skinparam linetype ortho

class ApplicationStart {
  + ApplicationStart():
  - connectionPool: ConnectionPool
  + contextInitialized(ServletContextEvent): void
  + contextDestroyed(ServletContextEvent): void
  - unregisterJDBCdrivers(): void
  + getConnectionPool(): ConnectionPool
  - getPassword(ServletContextEvent): String
}

class Bottom {
  + Bottom(String, float):
  + Bottom(int, String, float):
  - id: int
  - price: float
  - name: String
  + getName(): String
  + toString(): String
  + setName(String): void
  + getPrice(): float
  + getId(): int
  + setId(int): void
  + setPrice(float): void
}

class ConnectionPool {
  + ConnectionPool(String, String, String):
  + ConnectionPool(String):
  - ds: HikariDataSource
  - USER: String
  - URL: String
  + getConnection(): Connection
  + close(): void
}

class Cupcake {
  + Cupcake(int, Bottom, Top):
  + Cupcake(Bottom, Top):
  - id: int
  - bottom: Bottom
  - top: Top
  + getId(): int
  + getTop(): Top
  + setTop(Top): void
  + getBottom(): Bottom
  + toString(): String
  + setId(int): void
  + setBottom(Bottom): void
  + getPrice(): float
}

class CupcakeFacade {
  + getBottomById(int, Connection): Bottom
  + getAllToppings(Connection): List<Top>
  + getTopById(int, Connection): Top
  + getAllBottoms(Connection): List<Bottom>
}

class CupcakeMapper {
  ~ getAllToppings(Connection): List<Top>
  ~ getBottomById(int, Connection): Bottom
  ~ getAllBottoms(Connection): List<Bottom>
  ~ getTopById(int, Connection): Top
}

class DatabaseException {
  + DatabaseException(Exception, String):
  + DatabaseException(String):
}

class Order {
  + Order(User):
  + Order(int, User, LocalDateTime):
  + Order(User, LocalDateTime):
  + Order(int, User, LocalDateTime, OrderStatus):
  + Order(int, User, LocalDateTime, ShoppingCart, OrderStatus):
  - id: int
  - user: User
  - readyTime: LocalDateTime
  - shoppingCart: ShoppingCart
  - status: OrderStatus
  + setReadyTime(LocalDateTime): void
  + getShoppingCart(): ShoppingCart
  + toString(): String
  + getUser(): User
  + getStatus(): OrderStatus
  + setUser(User): void
  + setShoppingCart(ShoppingCart): void
  + getReadyTime(): LocalDateTime
  + getFormattedReadyTime(): String
  + setId(int): void
  + setStatus(OrderStatus): void
  + getCupcakeCount(): int
  + getId(): int
  + getPrice(): float
}

class OrderFacade {
  + getAllOrdersByUser(User, Connection, boolean): List<Order>
  + createOrder(Order, Connection): void
  + getAllOrdersSortedByStatus(Connection): List<Order>
  + createOrder(Order, Connection, boolean): void
  + getAllOrders(Connection): List<Order>
  + getAllOrders(Connection, boolean): List<Order>
  + updateOrderStatus(int, OrderStatus, Connection): void
  + updateOrderStatus(int, OrderStatus, Connection, boolean): void
  + getAllOrdersByUser(User, Connection): List<Order>
}

class OrderMapper {
  ~ updateOrderStatus(int, OrderStatus, Connection, boolean): void
  - getShoppingCartByOrderId(int, Connection): ShoppingCart
  ~ getAllOrders(Connection, boolean): List<Order>
  ~ createOrder(Order, Connection, boolean): void
  ~ getAllOrdersByUser(User, Connection, boolean): List<Order>
}

enum OrderStatus << enumeration >> {
  - OrderStatus(String, int):
  + CANCELLED:
  + READY:
  + IN_SHOPPING_CART:
  + PENDING:
  - value: int
  + DELIVERED:
  - name: String
  + valueOf(String): OrderStatus
  + getName(): String
  + values(): OrderStatus[]
  + getValue(): int
}

enum Role << enumeration >> {
  - Role(String):
  + CUSTOMER:
  + ADMIN:
  - name: String
  + getName(): String
  + values(): Role[]
  + valueOf(String): Role
}

class ShoppingCart {
  + ShoppingCart():
  - cupcakeList: List<Cupcake>
  + getTotalAmount(): int
  + addCupcake(Cupcake): void
  + removeCupcake(Cupcake): void
  + clearCart(): void
  + toString(): String
  + getTotalPrice(): float
  + removeCupcakeById(int): void
  + getCupcakeList(): List<Cupcake>
}

class Top {
  + Top(int, String, float):
  + Top(String, float):
  - name: String
  - price: float
  - id: int
  + setPrice(float): void
  + getId(): int
  + getPrice(): float
  + toString(): String
  + setName(String): void
  + setId(int): void
  + getName(): String
}

class User {
  + User(String, String, Role):
  + User(String, String, Role, float):
  - role: Role
  - currentOrder: Order
  - email: String
  - password: String
  - balance: float
  + setPassword(String): void
  + getFormattedBalance(): String
  + getPassword(): String
  + addBalance(float): void
  + setBalance(float): void
  + toString(): String
  + getEmail(): String
  + getOrders(): List<Order>
  + equals(Object): boolean
  + getLastOrderStatus(): OrderStatus
  + setCurrentOrder(Order): void
  + getRole(): Role
  + setRole(Role): void
  + getCurrentOrder(): Order
  + getBalance(): float
  + hashCode(): int
  + setEmail(String): void
}

class UserFacade {
  + getAllUsers(Connection): List<User>
  + setNewPassword(User, Connection): void
  + login(String, String, Connection): User
  + getUserByEmail(String, Connection): User
  + updateBalance(User, Connection): void
  + createUser(String, String, Role, Connection): User
}

class UserMapper {
  + setNewPassword(User, Connection): void
  ~ updateBalance(User, Connection, boolean): void
  ~ getAllUsers(Connection): List<User>
  ~ login(String, String, Connection): User
  ~ createUser(String, String, Role, Connection): User
  + getUserByEmail(String, Connection): User
}

ApplicationStart  "1" *-[#595959,plain]-> "connectionPool\n1" ConnectionPool

User              "1" *-[#595959,plain]-> "currentOrder\n1" Order
User              "1" *-[#595959,plain]-> "role\n1" Role

Order             "1" *-[#595959,plain]-> "status\n1" OrderStatus
Order             "1" *-[#595959,plain]-> "shoppingCart\n1" ShoppingCart
Order             "1" *-[#595959,plain]-> "user\n1" User

ShoppingCart      "1" *-[#595959,plain]-> "cupcakeList\n*" Cupcake

Cupcake           "1" *-[#595959,plain]-> "bottom\n1" Bottom
Cupcake           "1" *-[#595959,plain]-> "top\n1" Top

UserFacade        "1" *-[#595959,plain]-> "userMapper\n1" UserMapper
CupcakeFacade     "1" *-[#595959,plain]-> "cupcakeMapper\n1" CupcakeMapper
OrderFacade       "1" *-[#595959,plain]-> "orderMapper\n1" OrderMapper

@enduml